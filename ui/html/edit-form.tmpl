{{define "edit-form"}}
<div id="edit-note-{{.ID}}" class="glass rounded-2xl overflow-hidden transform transition-all duration-300">
    <div class="p-6 relative">
        <form hx-put="/gratitude/update/{{.ID}}"
              hx-target="#edit-note-{{.ID}}"
              hx-swap="outerHTML"
              class="space-y-6">
            
            <div class="group">
                <label for="title" class="block text-sm font-medium text-gray-700 mb-2 group-focus-within:text-[#EC4899] transition-colors">Title</label>
                <input type="text" id="title" name="title" required minlength="3" maxlength="100"
                       value="{{.Title}}"
                       class="block w-full rounded-xl border-gray-200 shadow-sm focus:border-[#EC4899] focus:ring-[#EC4899] transition-all duration-200 text-lg py-3 px-4 bg-white/50">
                <div class="error-message text-red-500 text-sm mt-1" data-field="title"></div>
            </div>

            <div class="group">
                <label for="content" class="block text-sm font-medium text-gray-700 mb-2 group-focus-within:text-[#EC4899] transition-colors">Express Your Gratitude</label>
                <textarea id="content" name="content" rows="4" required minlength="10" maxlength="1000"
                          class="block w-full rounded-xl border-gray-200 shadow-sm focus:border-[#EC4899] focus:ring-[#EC4899] transition-all duration-200 text-lg py-3 px-4 bg-white/50">{{.Content}}</textarea>
                <div class="error-message text-red-500 text-sm mt-1" data-field="content"></div>
            </div>

            <div class="group">
                <label for="category" class="block text-sm font-medium text-gray-700 mb-2 group-focus-within:text-[#EC4899] transition-colors">Category</label>
                <select id="category" name="category" required
                        class="block w-full rounded-xl border-gray-200 shadow-sm focus:border-[#EC4899] focus:ring-[#EC4899] transition-all duration-200 text-lg py-3 px-4 bg-white/50">
                    <option value="">Select a category</option>
                    <option value="personal" {{if eq .Category "personal"}}selected{{end}}>✨ Personal Growth</option>
                    <option value="work" {{if eq .Category "work"}}selected{{end}}>💼 Professional Life</option>
                    <option value="family" {{if eq .Category "family"}}selected{{end}}>👨‍👩‍👧‍👦 Family & Friends</option>
                    <option value="achievements" {{if eq .Category "achievements"}}selected{{end}}>🏆 Achievements</option>
                    <option value="health" {{if eq .Category "health"}}selected{{end}}>🌱 Health & Wellness</option>
                    <option value="experiences" {{if eq .Category "experiences"}}selected{{end}}>🌟 Experiences</option>
                </select>
                <div class="error-message text-red-500 text-sm mt-1" data-field="category"></div>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-4">Choose an Emoji</label>
                <div class="flex flex-wrap gap-4 p-4 bg-white/50 rounded-2xl">
                    <button type="button" class="emoji-btn text-4xl p-4 rounded-xl hover:scale-110 hover:bg-white hover:shadow-xl transition-all duration-300 {{if eq .Emoji "✨"}}scale-110 bg-white shadow-xl{{end}}" data-emoji="✨">✨</button>
                    <button type="button" class="emoji-btn text-4xl p-4 rounded-xl hover:scale-110 hover:bg-white hover:shadow-xl transition-all duration-300 {{if eq .Emoji "🌟"}}scale-110 bg-white shadow-xl{{end}}" data-emoji="🌟">🌟</button>
                    <button type="button" class="emoji-btn text-4xl p-4 rounded-xl hover:scale-110 hover:bg-white hover:shadow-xl transition-all duration-300 {{if eq .Emoji "💫"}}scale-110 bg-white shadow-xl{{end}}" data-emoji="💫">💫</button>
                    <button type="button" class="emoji-btn text-4xl p-4 rounded-xl hover:scale-110 hover:bg-white hover:shadow-xl transition-all duration-300 {{if eq .Emoji "🙏"}}scale-110 bg-white shadow-xl{{end}}" data-emoji="🙏">🙏</button>
                    <button type="button" class="emoji-btn text-4xl p-4 rounded-xl hover:scale-110 hover:bg-white hover:shadow-xl transition-all duration-300 {{if eq .Emoji "❤️"}}scale-110 bg-white shadow-xl{{end}}" data-emoji="❤️">❤️</button>
                    <button type="button" class="emoji-btn text-4xl p-4 rounded-xl hover:scale-110 hover:bg-white hover:shadow-xl transition-all duration-300 {{if eq .Emoji "🌈"}}scale-110 bg-white shadow-xl{{end}}" data-emoji="🌈">🌈</button>
                </div>
                <input type="hidden" id="selected-emoji" name="emoji" value="{{.Emoji}}">
                <div class="error-message text-red-500 text-sm mt-1" data-field="emoji"></div>
            </div>

            <div class="flex justify-end space-x-4 pt-6">
                <button type="button"
                        hx-get="/gratitude/{{.ID}}"
                        hx-target="#edit-note-{{.ID}}"
                        hx-swap="outerHTML"
                        class="px-6 py-3 text-lg font-medium text-gray-700 bg-gray-100 rounded-xl hover:bg-gray-200 transition-all duration-200">
                    Cancel
                </button>
                <button type="submit"
                        class="inline-flex items-center px-8 py-4 text-lg font-medium text-white bg-gradient-to-r from-[#EC4899] to-[#D91656] rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-200">
                    <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                    </svg>
                    Update Note
                </button>
            </div>
        </form>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const emojiButtons = document.querySelectorAll('.emoji-btn');
    const emojiInput = document.getElementById('selected-emoji');
    
    emojiButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Remove active state from all emoji buttons
            emojiButtons.forEach(btn => {
                btn.classList.remove('scale-110', 'bg-white', 'shadow-xl');
            });
            
            // Add active state to selected emoji button
            this.classList.add('scale-110', 'bg-white', 'shadow-xl');
            emojiInput.value = this.dataset.emoji;
        });
    });

    // Handle form validation errors
    const form = document.querySelector('form');
    form.addEventListener('htmx:afterRequest', function(event) {
        // Clear previous error messages
        document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
        
        if (event.detail.xhr.status === 400) {
            try {
                const errors = JSON.parse(event.detail.xhr.responseText);
                Object.entries(errors).forEach(([field, message]) => {
                    const errorDiv = document.querySelector(`.error-message[data-field="${field}"]`);
                    if (errorDiv) {
                        errorDiv.textContent = message;
                        // Add error styling to the input
                        const input = document.querySelector(`[name="${field}"]`);
                        if (input) {
                            input.classList.add('border-red-500', 'ring-red-500');
                            input.classList.remove('border-gray-200', 'focus:border-[#EC4899]', 'focus:ring-[#EC4899]');
                        }
                    }
                });
            } catch (e) {
                console.error('Error parsing validation response:', e);
            }
        }
    });

    // Reset error styling when user starts typing
    document.querySelectorAll('input, textarea, select').forEach(input => {
        input.addEventListener('input', function() {
            this.classList.remove('border-red-500', 'ring-red-500');
            this.classList.add('border-gray-200', 'focus:border-[#EC4899]', 'focus:ring-[#EC4899]');
            const errorDiv = document.querySelector(`.error-message[data-field="${this.name}"]`);
            if (errorDiv) {
                errorDiv.textContent = '';
            }
        });
    });
});
</script>
{{end}} 